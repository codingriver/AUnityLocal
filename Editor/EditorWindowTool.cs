using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using FxProNS;
using UnityEditor;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEditorInternal;
using Object = UnityEngine.Object;

namespace AUnityLocal.Editor
{
    public class EditorWindowTool : EditorWindow
    {
        // Ê†∑ÂºèÁºìÂ≠ò
        private GUIStyle titleStyle;
        private GUIStyle sectionHeaderStyle;
        private GUIStyle buttonStyle;
        private GUIStyle boxStyle;
        private GUIStyle fieldStyle;
        private Vector2 scrollPosition;

        [MenuItem("AUnityLocal/EditorWindowTool", false, 1000)]
        public static void ShowWindow()
        {
            var window = GetWindow<EditorWindowTool>("EditorWindowTool Â∑•ÂÖ∑");
            window.minSize = new Vector2(900, 800);
            window.maxSize = new Vector2(1400, 1200);
        }


        private string arg1 = "state";
        private string arg2 = "2";
        private Vector3 arg3 = new Vector3(1, 0, 0);
        private int count = 20;
        private Transform root = null;
        private List<GameObject> objs = new List<GameObject>();
        bool includeInactive = true;
        bool includeDisabled = true;
        private int sortingOrder = 5300;
        private ReorderableList<GameObject> _gameObjectFilterList = null;

        void OnEnable()
        {
            _gameObjectFilterList = new ReorderableList<GameObject>("GameObjects");
        }

        private void InitializeStyles()
        {
            // Ê†áÈ¢òÊ†∑Âºè
            titleStyle = new GUIStyle(EditorStyles.boldLabel)
            {
                alignment = TextAnchor.MiddleCenter,
                fontSize = 20,
                fontStyle = FontStyle.Bold,
                margin = new RectOffset(0, 0, 15, 20),
                normal = { textColor = new Color(0.2f, 0.8f, 1.0f) }
            };

            // Âå∫ÂüüÊ†áÈ¢òÊ†∑Âºè
            sectionHeaderStyle = new GUIStyle(EditorStyles.boldLabel)
            {
                fontSize = 14,
                fontStyle = FontStyle.Bold,
                margin = new RectOffset(5, 5, 10, 5),
                normal = { textColor = new Color(0.8f, 0.9f, 1.0f) }
            };

            // ÊåâÈíÆÊ†∑Âºè
            buttonStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = 12,
                fontStyle = FontStyle.Bold,
                fixedHeight = 35,
                margin = new RectOffset(5, 5, 3, 3),
                padding = new RectOffset(10, 10, 8, 8)
            };

            // ÁõíÂ≠êÊ†∑Âºè
            boxStyle = new GUIStyle(GUI.skin.box)
            {
                padding = new RectOffset(15, 15, 10, 10),
                margin = new RectOffset(5, 5, 5, 5)
            };

            // Â≠óÊÆµÊ†∑Âºè
            fieldStyle = new GUIStyle(EditorStyles.textField)
            {
                fontSize = 11,
                fixedHeight = 20
            };
        }

        private void OnGUI()
        {
            if (titleStyle == null) InitializeStyles();

            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);

            DrawTitle();

            EditorGUILayout.BeginVertical(boxStyle);

            // Âü∫Á°ÄÂèÇÊï∞Âå∫Âüü
            DrawSection("üîß Âü∫Á°ÄÂèÇÊï∞", () =>
            {
                root = (Transform)EditorGUILayout.ObjectField(new GUIContent("Ê†πËäÇÁÇπ:", "ÊåáÂÆöÊìç‰ΩúÁöÑÊ†πËäÇÁÇπ"),
                    root, typeof(Transform), true, GUILayout.Height(20));

                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("ÂèÇÊï∞1:", GUILayout.Width(60));
                arg1 = EditorGUILayout.TextField(arg1, fieldStyle);
                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("ÂèÇÊï∞2:", GUILayout.Width(60));
                arg2 = EditorGUILayout.TextField(arg2, fieldStyle);
                EditorGUILayout.EndHorizontal();

                arg3 = EditorGUILayout.Vector3Field("ÂèÇÊï∞3:", arg3);
                count = EditorGUILayout.IntField(new GUIContent("Â§çÂà∂Êï∞Èáè:", "ËÆæÁΩÆÂ§çÂà∂Áâ©‰ΩìÁöÑÊï∞Èáè"), count);

                EditorGUILayout.BeginHorizontal();
                includeInactive = EditorGUILayout.Toggle("ÂåÖÂê´Êú™ÊøÄÊ¥ªÂØπË±°", includeInactive);
                includeDisabled = EditorGUILayout.Toggle("ÂåÖÂê´Êú™ÂêØÁî®ÁªÑ‰ª∂", includeDisabled);
                EditorGUILayout.EndHorizontal();
            });

            GUILayout.Space(10);

            // Âä®ÁîªÊéßÂà∂Âå∫Âüü
            DrawSection("üé¨ Âä®ÁîªÊéßÂà∂", () =>
            {
                if (DrawButton("ËÆæÁΩÆÂä®ÁîªÂèÇÊï∞", "ËÆæÁΩÆÊâÄÊúâAnimatorÁªÑ‰ª∂ÁöÑÂèÇÊï∞", Color.cyan))
                {
                    SetAnimatorParameters();
                }
            });

            GUILayout.Space(5);

            // Áâ©‰ΩìÊìç‰ΩúÂå∫Âüü
            DrawSection("üì¶ Áâ©‰ΩìÊìç‰Ωú", () =>
            {
                EditorGUILayout.BeginHorizontal();
                if (DrawButton("ËÆæÁΩÆÁâ©‰ΩìÂêçÂ≠ó", "Ê†πÊçÆTroopsSkinCarEventËÆæÁΩÆÁâ©‰ΩìÂêçÂ≠ó", Color.yellow, GUILayout.Width(180)))
                {
                    SetObjectNames();
                }

                if (DrawButton("ÊòæÁ§∫Â≠êËäÇÁÇπÊï∞Èáè", "ÊòæÁ§∫Ê†πËäÇÁÇπÁöÑÂ≠êËäÇÁÇπÊï∞Èáè", Color.green, GUILayout.Width(180)))
                {
                    ShowChildCount();
                }

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();
                if (DrawButton("ÊòæÁ§∫ÈÄâ‰∏≠ËäÇÁÇπÊï∞Èáè", "ÊòæÁ§∫ÂΩìÂâçÈÄâ‰∏≠ÁöÑËäÇÁÇπÊï∞Èáè", Color.magenta, GUILayout.Width(180)))
                {
                    ShowSelectedCount();
                }

                if (DrawButton("ÊâìÂç∞PathÁõ∏ÂØπÊ†πËäÇÁÇπ", "ÊâìÂç∞ÈÄâ‰∏≠ËäÇÁÇπÁõ∏ÂØπ‰∫éÊ†πËäÇÁÇπÁöÑË∑ØÂæÑ", Color.white, GUILayout.Width(180)))
                {
                    Tools.PrintRelativePaths(Selection.transforms,root);
                }

                EditorGUILayout.EndHorizontal();
            });

            GUILayout.Space(5);

            // Â§çÂà∂ÂäüËÉΩÂå∫Âüü
            DrawSection("üìã Â§çÂà∂ÂäüËÉΩ", () =>
            {
                _gameObjectFilterList?.DoLayoutList();
                GUILayout.Space(5);
                if (DrawButton("Â§çÂà∂Áâ©‰Ωì", "Ê†πÊçÆËÆæÁΩÆÂ§çÂà∂ÈÄâ‰∏≠ÁöÑÁâ©‰Ωì", Color.green))
                {
                    CopyObjects();
                }
            });

            GUILayout.Space(5);

            // Ê∏≤ÊüìÊéßÂà∂Âå∫Âüü
            DrawSection("üé® Ê∏≤ÊüìÊéßÂà∂", () =>
            {
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField("OrderÂÄº:", GUILayout.Width(60));
                sortingOrder = EditorGUILayout.IntField(sortingOrder, GUILayout.Width(100));
                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();
                if (DrawButton("ËÆæÁΩÆOrder", "ËÆæÁΩÆÁ≤íÂ≠êÁ≥ªÁªüÁöÑÊ∏≤ÊüìÈ°∫Â∫è", Color.blue, GUILayout.Width(120)))
                {
                    SetSortingOrder();
                }

                if (DrawButton("ËÆæÁΩÆOrderÂÅèÁßª", "Âú®ÂΩìÂâçOrderÂü∫Á°Ä‰∏äÊ∑ªÂä†Âü∫Êï∞", Color.cyan, GUILayout.Width(120)))
                {
                    AddSortingOrderBase();
                }

                if (DrawButton("ÊâìÂç∞SortingOrder", "ÊâìÂç∞ÊâÄÊúâÊ∏≤ÊüìÂô®ÁöÑOrder‰ø°ÊÅØ", Color.yellow, GUILayout.Width(120)))
                {
                    PrintSortingOrder();
                }

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();
                if (DrawButton("ÈöêËóèSkinnedMeshRenderer", "ÈöêËóèÊâÄÊúâËíôÁöÆÁΩëÊ†ºÊ∏≤ÊüìÂô®", Color.red, GUILayout.Width(180)))
                {
                    ToggleSkinnedMeshRenderer(false);
                }

                if (DrawButton("ÊòæÁ§∫SkinnedMeshRenderer", "ÊòæÁ§∫ÊâÄÊúâËíôÁöÆÁΩëÊ†ºÊ∏≤ÊüìÂô®", Color.green, GUILayout.Width(180)))
                {
                    ToggleSkinnedMeshRenderer(true);
                }

                EditorGUILayout.EndHorizontal();

                if (DrawButton("ÊâìÂç∞ÊùêË¥®ÁêÉÊï∞Èáè", "ÁªüËÆ°Âπ∂ÊâìÂç∞ÊùêË¥®ÁêÉ‰ΩøÁî®ÊÉÖÂÜµ", Color.magenta))
                {
                    PrintMaterialCount();
                }
            });

            GUILayout.Space(5);

            // ÊÄßËÉΩÂàÜÊûêÂå∫Âüü
            DrawSection("üìä ÊÄßËÉΩÂàÜÊûê", () =>
            {
                if (DrawButton("ÂºÄÂêØÂàÜÊûêÁä∂ÊÄÅ", "ÂºÄÂêØÊÄßËÉΩÂàÜÊûêÊ®°Âºè", Color.red))
                {
                    SetProfilerStatus();
                }
            });

            EditorGUILayout.EndVertical();
            EditorGUILayout.EndScrollView();
        }

        private void DrawSection(string title, System.Action content)
        {
            EditorGUILayout.BeginVertical(boxStyle);
            GUILayout.Label(title, sectionHeaderStyle);

            // ÁªòÂà∂ÂàÜÈöîÁ∫ø
            Rect rect = GUILayoutUtility.GetRect(1, 2);
            EditorGUI.DrawRect(rect, new Color(0.4f, 0.6f, 0.8f, 0.5f));

            GUILayout.Space(5);
            content?.Invoke();
            EditorGUILayout.EndVertical();
        }

        private bool DrawButton(string text, string tooltip = "", Color? color = null, params GUILayoutOption[] options)
        {
            Color originalColor = GUI.backgroundColor;
            if (color.HasValue)
            {
                GUI.backgroundColor = color.Value;
            }

            GUIContent content = new GUIContent(text, tooltip);
            bool result = GUILayout.Button(content, buttonStyle, options);

            GUI.backgroundColor = originalColor;
            return result;
        }

        // Â∞ÜÂéüÊù•ÁöÑÊåâÈíÆÂäüËÉΩÊãÜÂàÜ‰∏∫Áã¨Á´ãÊñπÊ≥ï
        private void SetAnimatorParameters()
        {
            Animator[] allObjects = null;
            if (root != null)
            {
                allObjects = root.GetComponentsInChildren<Animator>(includeInactive);
            }
            else
            {
                allObjects = FindObjectsOfType<Animator>(includeInactive);
            }

            if (allObjects == null)
            {
                Debug.LogWarning("Êú™ÊâæÂà∞‰ªª‰Ωï Animator ÁªÑ‰ª∂");
                return;
            }

            int intArg2 = 0;
            if (!int.TryParse(arg2, out intArg2))
            {
                Debug.LogWarning("ÂèÇÊï∞2ÂøÖÈ°ªÊòØÊï¥Êï∞");
                return;
            }

            foreach (var com in allObjects)
            {
                if (!includeDisabled && !com.enabled)
                {
                    continue;
                }

                com.SetInteger(arg1, intArg2);
                Debug.Log($"ËÆæÁΩÆ {com.gameObject.name} ÁöÑ {arg1} ‰∏∫ {intArg2}");
            }
        }

        private void SetObjectNames()
        {
            TroopsSkinCarEvent[] allObjects = null;
            if (root != null)
            {
                allObjects = root.GetComponentsInChildren<TroopsSkinCarEvent>(includeInactive);
            }
            else
            {
                allObjects = FindObjectsOfType<TroopsSkinCarEvent>(includeInactive);
            }

            if (allObjects == null)
            {
                Debug.LogWarning("Êú™ÊâæÂà∞‰ªª‰Ωï TroopsSkinCarEvent ÁªÑ‰ª∂");
                return;
            }

            foreach (var o in allObjects)
            {
                o.transform.parent.name = o.m_DressId.ToString();
            }
        }

        private void CopyObjects()
        {
            foreach (var asset in _gameObjectFilterList.dataList)
            {
                for (int i = 0; i < count; i++)
                {
                    if (asset != null)
                    {
                        var newObj = Instantiate(asset);
                        newObj.transform.SetParent(asset.transform.parent);
                        newObj.name = asset.name + "_copy_" + (i + 1);
                        newObj.transform.position += arg3 * (i + 1);
                    }
                }
            }
        }

        private void ShowChildCount()
        {
            if (root == null)
            {
                Debug.LogError("ËØ∑ÂÖàÊåáÂÆöËäÇÁÇπ");
                return;
            }

            Debug.LogWarning($"ËäÇÁÇπ {root.name} ÁöÑÂ≠êËäÇÁÇπÊï∞Èáè: {root.childCount}");
        }

        private void ShowSelectedCount()
        {
            var selectedObjects = Selection.transforms;
            Debug.LogWarning($"ÈÄâ‰∏≠ËäÇÁÇπÊï∞Èáè: {selectedObjects.Length}");
        }

        private void SetSortingOrder()
        {
            if (root == null)
            {
                Debug.LogError("ËØ∑ÂÖàÊåáÂÆöËäÇÁÇπ");
                return;
            }

            ParticleSystemRenderer[] particleRenderers =
                root.GetComponentsInChildren<ParticleSystemRenderer>(includeInactive);

            foreach (ParticleSystemRenderer renderer in particleRenderers)
            {
                renderer.sortingOrder = sortingOrder;
            }
        }

        private void AddSortingOrderBase()
        {
            if (root == null)
            {
                Debug.LogError("ËØ∑ÂÖàÊåáÂÆöËäÇÁÇπ");
                return;
            }

            ParticleSystemRenderer[] particleRenderers =
                root.GetComponentsInChildren<ParticleSystemRenderer>(includeInactive);

            foreach (ParticleSystemRenderer renderer in particleRenderers)
            {
                int order = renderer.sortingOrder;
                renderer.sortingOrder += sortingOrder;
                Debug.Log($"ËÆæÁΩÆ {renderer.gameObject.name} ÁöÑ Order ‰ªé {order} Âà∞ {renderer.sortingOrder}");
            }
        }

        private void ToggleSkinnedMeshRenderer(bool enable)
        {
            SkinnedMeshRenderer[] allObjects = null;
            if (root != null)
            {
                allObjects = root.GetComponentsInChildren<SkinnedMeshRenderer>(includeInactive);
            }
            else
            {
                allObjects = FindObjectsOfType<SkinnedMeshRenderer>(includeInactive);
            }

            if (allObjects == null || allObjects.Length == 0)
            {
                Debug.LogWarning("Êú™ÊâæÂà∞‰ªª‰Ωï SkinnedMeshRenderer ÁªÑ‰ª∂");
                return;
            }

            foreach (var renderer in allObjects)
            {
                if (!includeDisabled && !renderer.enabled)
                {
                    continue;
                }

                renderer.enabled = enable;
                Debug.Log($"{(enable ? "ÊòæÁ§∫" : "ÈöêËóè")} {renderer.gameObject.name} ÁöÑ SkinnedMeshRenderer");
            }

            Debug.Log($"Êìç‰ΩúÂÆåÊàêÔºåÂÖ±{(enable ? "ÊòæÁ§∫" : "ÈöêËóè")}‰∫Ü {allObjects.Length} ‰∏™ SkinnedMeshRenderer");
        }

        private void PrintMaterialCount()
        {
            Dictionary<Material, int> materialCount = new Dictionary<Material, int>();
            Renderer[] allRenderers = null;

            if (root != null)
            {
                allRenderers = root.GetComponentsInChildren<Renderer>(includeInactive);
            }
            else
            {
                allRenderers = FindObjectsOfType<Renderer>(includeInactive);
            }

            if (allRenderers == null || allRenderers.Length == 0)
            {
                Debug.LogWarning("Êú™ÊâæÂà∞‰ªª‰Ωï Renderer ÁªÑ‰ª∂");
                return;
            }

            foreach (var renderer in allRenderers)
            {
                if (!includeDisabled && !renderer.enabled)
                {
                    continue;
                }

                foreach (var material in renderer.sharedMaterials)
                {
                    if (material != null)
                    {
                        if (materialCount.ContainsKey(material))
                        {
                            materialCount[material]++;
                        }
                        else
                        {
                            materialCount[material] = 1;
                        }
                    }
                }
            }

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("=== ÊùêË¥®ÁêÉ‰ΩøÁî®ÁªüËÆ° ===");
            foreach (var kvp in materialCount.OrderByDescending(x => x.Value))
            {
                sb.AppendLine($"ÊùêË¥®: {kvp.Key.name} - ‰ΩøÁî®Ê¨°Êï∞: {kvp.Value}");
            }

            sb.AppendLine($"ÊÄªËÆ°: {materialCount.Count} ÁßçÊùêË¥®ÁêÉÔºå{materialCount.Values.Sum()} Ê¨°‰ΩøÁî®");

            Debug.Log(sb.ToString());
        }

        private void PrintSortingOrder()
        {
            if (root == null)
            {
                Debug.LogError("ËØ∑ÂÖàÊåáÂÆöËäÇÁÇπ");
                return;
            }

            ParticleSystemRenderer[] particleRenderers =
                root.GetComponentsInChildren<ParticleSystemRenderer>(includeInactive);

            if (particleRenderers.Length == 0)
            {
                Debug.LogWarning("Êú™ÊâæÂà∞‰ªª‰Ωï ParticleSystemRenderer ÁªÑ‰ª∂");
                return;
            }

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("=== Particle System Sorting Order ‰ø°ÊÅØ ===");

            foreach (ParticleSystemRenderer renderer in particleRenderers)
            {
                sb.AppendLine($"Áâ©‰Ωì: {renderer.gameObject.name} - Sorting Order: {renderer.sortingOrder}");
            }

            Debug.Log(sb.ToString());
        }

        private void SetProfilerStatus()
        {
            // EditorApplication.ExecuteMenuItem("Window/Analysis/Profiler");
            // ProfilerDriver.enabled = true;
            Tools.FindAndGetComponent<Camera>("UICam", false);
            Tools.FindAndGetComponent<Camera>("UICam", false);
            var go = GameObject.Find("world_root");
            if (go != null)
            {
                for (int i = 0; i < go.transform.childCount; i++)
                {
                    var t= go.transform.GetChild(i);
                    if (t.name != "LargeLand")
                    {
                        t.gameObject.SetActive(false);
                    }
                }
            }

            Tools.SetGameObject("Troops_root", false);
            Tools.SetGameObject("rss_root", false);
            Tools.SetGameObject("lod3_root", false);
            Tools.SetGameObject("CityRoot", false);
            Tools.SetGameObject("fogSystem", false);
            Tools.SetGameObject("BillBuffer", false);

            Tools.ToggleGameStats();
        }

        private void DrawTitle()
        {
            GUILayout.Label("EditorWindowTool Â∑•ÂÖ∑Èù¢Êùø", titleStyle);

            // ÁªòÂà∂Ë£ÖÈ•∞Á∫ø
            Rect titleRect = GUILayoutUtility.GetRect(1, 3);
            EditorGUI.DrawRect(titleRect, new Color(0.2f, 0.8f, 1.0f, 0.6f));

            GUILayout.Space(10);
        }


    }
}